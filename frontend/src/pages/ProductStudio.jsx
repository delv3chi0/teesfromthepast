import { useState, useEffect, useRef, useCallback } from 'react';import { Box, Heading, Text, VStack, Select, SimpleGrid, Image, Spinner, Alert, AlertIcon, Divider, useToast, Icon, Button, FormControl, FormLabel, Link as ChakraLink, Flex, Tooltip, AspectRatio, Input, InputGroup, InputRightElement, IconButton, RadioGroup, Stack, Popover, PopoverTrigger, PopoverContent, PopoverArrow, PopoverCloseButton, PopoverHeader, PopoverBody, Slider, SliderTrack, SliderFilledTrack, SliderThumb, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, HStack } from '@chakra-ui/react';import { useNavigate, useLocation, Link as RouterLink } from 'react-router-dom';import { client } from '../api/client';import { useAuth } from '../context/AuthProvider';import { FaShoppingCart, FaTshirt, FaPalette, FaFont, FaTrash, FaEyeDropper, FaPaintBrush, FaArrowsAltH } from 'react-icons/fa';const ThemedSelect = (props) => (<Select size="lg" bg="brand.secondary" borderColor="whiteAlpha.300" _hover={{ borderColor: "brand.accentYellow" }} focusBorderColor="brand.accentYellow" {...props}/>);const ThemedControlInput = (props) => (<Input size="sm" bg="brand.secondary" borderColor="whiteAlpha.300" _hover={{ borderColor: "brand.accentYellow" }} focusBorderColor="brand.accentYellow" {...props}/>);const DPI = 300;const DEFAULT_PRINT_WIDTH_INCHES = 12;const DEFAULT_PRINT_HEIGHT_INCHES = 16;const PREVIEW_SCALE = 1/6;export default function ProductStudio() {const { user } = useAuth();const navigate = useNavigate();const toast = useToast();const reactLocation = useLocation();const [products, setProducts] = useState([]);const [loading, setLoading] = useState(true);const [designs, setDesigns] = useState([]);const [loadingDesigns, setLoadingDesigns] = useState(true);const [selectedProductId, setSelectedProductId] = useState('');const [selectedColorName, setSelectedColorName] = useState('');const [selectedSize, setSelectedSize] = useState('');const [selectedDesign, setSelectedDesign] = useState(null);const [currentMockupType, setCurrentMockupType] = useState('tee');const [textInputValue, setTextInputValue] = useState('');const [textColor, setTextColor] = useState('#FDF6EE');const [fontSize, setFontSize] = useState(30);const [fontFamily, setFontFamily] = useState('Montserrat');const [hasCanvasObjects, setHasCanvasObjects] = useState(false);const [canvasReady, setCanvasReady] = useState(false);const canvasEl = useRef(null);const fabricCanvas = useRef(null);const selectedProduct = products.find(p => p._id === selectedProductId);const uniqueColorVariants = selectedProduct ? [...new Map(selectedProduct.variants.map(v => [v.colorName, v])).values()] : [];const selectedColorVariant = selectedProduct?.variants.find(v => v.colorName === selectedColorName);const availableSizes = selectedColorVariant?.sizes?.filter(s => s.inStock) || [];const selectedSizeVariant = availableSizes.find(s => s.size === selectedSize);const finalVariant = selectedColorVariant && selectedSizeVariant ? { ...selectedColorVariant, ...selectedSizeVariant } : null;const hasSelectedDesign = selectedDesign !== null;const isCustomizeEnabled = selectedProductId && selectedColorName && selectedSize;const getPrintDimensions = () => {const printInfo = selectedProduct?.printInfo || {};return {widthInches: printInfo.printAreaWidthInches || DEFAULT_PRINT_WIDTH_INCHES,heightInches: printInfo.printAreaHeightInches || DEFAULT_PRINT_HEIGHT_INCHES,widthPixels: (printInfo.printAreaWidthInches || DEFAULT_PRINT_WIDTH_INCHES) * DPI,heightPixels: (printInfo.printAreaHeightInches || DEFAULT_PRINT_HEIGHT_INCHES) * DPI};};const updateHasCanvasObjects = useCallback(() => {if (!fabricCanvas.current) return;const userObjects = fabricCanvas.current.getObjects().filter(obj => obj.type === 'i-text' || (obj.id && obj.id.startsWith('design-')));setHasCanvasObjects(userObjects.length > 0);}, []);const addTextToCanvas = useCallback(() => {if (!textInputValue.trim() || !fabricCanvas.current) {toast({ title: "Please enter text content.", status: "warning" });return;}const textObj = new window.fabric.IText(textInputValue, {left: fabricCanvas.current.width / 2,top: fabricCanvas.current.height * 0.6,originX: 'center',originY: 'center',fill: textColor,fontSize: fontSize,fontFamily: fontFamily,hasControls: true,borderColor: 'brand.accentYellow',cornerColor: 'brand.accentYellow'});fabricCanvas.current.add(textObj);fabricCanvas.current.setActiveObject(textObj);fabricCanvas.current.renderAll();setTextInputValue('');}, [textInputValue, textColor, fontSize, fontFamily, toast]);const clearCanvas = useCallback(() => {if (!fabricCanvas.current) return;fabricCanvas.current.getObjects().forEach(obj => {if (obj !== fabricCanvas.current.backgroundImage) {fabricCanvas.current.remove(obj);}});fabricCanvas.current.renderAll();setSelectedDesign(null);}, []);const deleteSelectedObject = useCallback(() => {if (!fabricCanvas.current) return;const activeObj = fabricCanvas.current.getActiveObject();if (activeObj) {fabricCanvas.current.remove(activeObj);if (selectedDesign && activeObj.id === `design-${selectedDesign._id}`) {setSelectedDesign(null);}}}, [selectedDesign]);const centerSelectedObject = useCallback(() => {if (!fabricCanvas.current) return;const activeObj = fabricCanvas.current.getActiveObject();if (activeObj) {activeObj.centerH();fabricCanvas.current.renderAll();}}, []);const handleProceedToCheckout = useCallback(async () => {if (!finalVariant || (!hasSelectedDesign && !hasCanvasObjects)) {toast({ title: "Incomplete design", status: "warning" });return;}const { widthPixels, heightPixels } = getPrintDimensions();const printCanvas = new window.fabric.StaticCanvas(null, {width: widthPixels,height: heightPixels,backgroundColor: 'rgba(0,0,0,0)'});const scaleFactor = 1 / PREVIEW_SCALE;const previewCenterX = fabricCanvas.current.width / 2;const previewCenterY = fabricCanvas.current.height / 2;const printCenterX = printCanvas.width / 2;const printCenterY = printCanvas.height / 2;fabricCanvas.current.getObjects().filter(obj => obj.type === 'i-text' || (obj.id && obj.id.startsWith('design-'))).forEach(obj => {const clone = window.fabric.util.object.clone(obj);const offsetX = (obj.left - previewCenterX) * scaleFactor;const offsetY = (obj.top - previewCenterY) * scaleFactor;clone.set({left: printCenterX + offsetX,top: printCenterY + offsetY,scaleX: obj.scaleX * scaleFactor,scaleY: obj.scaleY * scaleFactor,originX: 'center',originY: 'center'});if (clone.type === 'i-text') {clone.set({fontSize: obj.fontSize * scaleFactor});}printCanvas.add(clone);});printCanvas.renderAll();const printDataUrl = printCanvas.toDataURL({ format: 'png', quality: 1 });printCanvas.dispose();try {toast({ title: "Uploading design...", status: "info", duration: null });const uploadRes = await client.post('/upload-print-file', {imageData: printDataUrl,designName: selectedDesign?.prompt || "Custom Design"});const checkoutItem = {productId: selectedProductId,variantSku: finalVariant.sku,size: finalVariant.size,color: finalVariant.colorName,printReadyDataUrl: uploadRes.data.publicUrl,previewDataUrl: fabricCanvas.current.toDataURL({ format: 'png', quality: 0.8 }),unitPrice: (selectedProduct.basePrice + (finalVariant.priceModifier || 0))};localStorage.setItem('itemToCheckout', JSON.stringify(checkoutItem));navigate('/checkout');} catch (error) {toast({ title: "Upload failed", status: "error" });console.error("Upload error:", error);}},[finalVariant, hasSelectedDesign, hasCanvasObjects, selectedDesign, selectedProductId, navigate, toast]);useEffect(() => {if (!canvasEl.current || fabricCanvas.current || !window.fabric) return;const { widthPixels, heightPixels } = getPrintDimensions();const previewWidth = widthPixels * PREVIEW_SCALE;const previewHeight = heightPixels * PREVIEW_SCALE;fabricCanvas.current = new window.fabric.Canvas(canvasEl.current, {width: previewWidth,height: previewHeight,backgroundColor: 'rgba(0,0,0,0)',selection: true});const FCanvas = fabricCanvas.current;const handleSelection = (e) => {const obj = e.target;if (obj?.type === 'i-text') {setTextColor(obj.fill);setFontSize(obj.fontSize);setFontFamily(obj.fontFamily);}updateHasCanvasObjects();};FCanvas.on('selection:created', handleSelection);FCanvas.on('selection:updated', handleSelection);FCanvas.on('selection:cleared', handleSelection);FCanvas.on('object:added', updateHasCanvasObjects);FCanvas.on('object:removed', updateHasCanvasObjects);const handleKeyDown = (e) => {if ((e.key === 'Delete' || e.key === 'Backspace') && !['INPUT', 'TEXTAREA'].includes(document.activeElement?.tagName)) {deleteSelectedObject();}};document.addEventListener('keydown', handleKeyDown);setCanvasReady(true);return () => {FCanvas.off('selection:created', handleSelection);FCanvas.off('selection:updated', handleSelection);FCanvas.off('selection:cleared', handleSelection);FCanvas.off('object:added', updateHasCanvasObjects);FCanvas.off('object:removed', updateHasCanvasObjects);document.removeEventListener('keydown', handleKeyDown);FCanvas.dispose();fabricCanvas.current = null;};}, [deleteSelectedObject, updateHasCanvasObjects]);useEffect(() => {if (!fabricCanvas.current || !finalVariant || !canvasReady) return;const getMockupImage = () => {const images = finalVariant.imageSet || [];if (currentMockupType === 'tee') return images.find(img => img.url.includes('tee_'));if (currentMockupType === 'man') return images.find(img => img.url.includes('man_'));return images.find(img => img.isPrimary) || images[0];};const mockupImage = getMockupImage();if (!mockupImage) return;window.fabric.Image.fromURL(mockupImage.url, (img) => {if (!img || !fabricCanvas.current) return;img.set({originX: 'left',originY: 'top',scaleX: fabricCanvas.current.width / img.width,scaleY: fabricCanvas.current.height / img.height});fabricCanvas.current.setBackgroundImage(img, () => {fabricCanvas.current.renderAll();}, {crossOrigin: 'anonymous'});}, { crossOrigin: 'anonymous' });}, [finalVariant, currentMockupType, canvasReady]);useEffect(() => {if (!fabricCanvas.current || !selectedDesign?.imageDataUrl || !canvasReady) return;fabricCanvas.current.getObjects().forEach(obj => {if (obj.id === `design-${selectedDesign._id}`) {fabricCanvas.current.remove(obj);}});window.fabric.Image.fromURL(selectedDesign.imageDataUrl, (img) => {if (!img || !fabricCanvas.current) return;img.set({id: `design-${selectedDesign._id}`,left: fabricCanvas.current.width / 2,top: fabricCanvas.current.height * 0.375,originX: 'center',originY: 'center',scaleToWidth: fabricCanvas.current.width * 0.33,hasControls: true,borderColor: 'brand.accentYellow'});fabricCanvas.current.add(img);fabricCanvas.current.renderAll();}, { crossOrigin: 'anonymous' });}, [selectedDesign, canvasReady]);useEffect(() => {setLoading(true);client.get('/storefront/products').then(res => {setProducts(res.data || []);const params = new URLSearchParams(reactLocation.search);const productId = params.get('productId');if (productId) setSelectedProductId(productId);}).catch(err => {toast({ title: "Error loading products", status: "error" });console.error(err);}).finally(() => setLoading(false));}, [reactLocation.search, toast]);useEffect(() => {if (!user) {setDesigns([]);setLoadingDesigns(false);return;}setLoadingDesigns(true);client.get('/mydesigns').then(res => setDesigns(res.data || [])).catch(console.error).finally(() => setLoadingDesigns(false));}, [user]);return (<VStack spacing={8} align="stretch" px={{ base: 4, md: 8 }} py={8}><Heading as="h1" size="2xl" color="brand.textLight" textAlign="center" mb={6}>Customize Your Apparel</Heading><Box bg="brand.paper" p={{ base: 5, md: 8 }} borderRadius="xl"><VStack spacing={6} align="stretch"><Heading as="h2" size="xl" color="brand.textLight"><Icon as={FaTshirt} mr={3} />1. Choose Your Apparel</Heading>{loading ? <Spinner size="xl" color="brand.accentYellow" /> : (<SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}><FormControl><FormLabel color="brand.textLight">Product</FormLabel><ThemedSelect value={selectedProductId} onChange={(e) => setSelectedProductId(e.target.value)}>{products.map(p => (<option key={p._id} value={p._id}>{p.name}</option>))}</ThemedSelect></FormControl><FormControl><FormLabel color="brand.textLight">Color</FormLabel><ThemedSelect value={selectedColorName} onChange={(e) => setSelectedColorName(e.target.value)} isDisabled={!selectedProductId}>{uniqueColorVariants.map(v => (<option key={v.colorName} value={v.colorName}>{v.colorName}</option>))}</ThemedSelect></FormControl><FormControl><FormLabel color="brand.textLight">Size</FormLabel><ThemedSelect value={selectedSize} onChange={(e) => setSelectedSize(e.target.value)} isDisabled={!selectedColorName}>{availableSizes.map(s => (<option key={s.size} value={s.size}>{s.size}</option>))}</ThemedSelect></FormControl></SimpleGrid>)}</VStack></Box><Box bg="brand.paper" p={{ base: 5, md: 8 }} borderRadius="xl"><VStack spacing={6} align="stretch"><Heading as="h2" size="xl" color="brand.textLight"><Icon as={FaPalette} mr={3} />2. Choose Your Design</Heading>{loadingDesigns ? <Spinner size="xl" color="brand.accentYellow" /> : (designs.length ? (<SimpleGrid columns={{ base: 2, sm: 3, md: 4, lg: 5 }} spacing={4}>{designs.map(design => (<Tooltip key={design._id} label={design.prompt} placement="top"><Box p={1} borderWidth="3px" borderRadius="lg" borderColor={selectedDesign?._id === design._id ? "brand.accentYellow" : "transparent"} onClick={() => setSelectedDesign(design)} cursor="pointer" _hover={{ borderColor: "whiteAlpha.300" }}><AspectRatio ratio={1 / 1}><Image src={design.imageDataUrl} alt={design.prompt} borderRadius="md" objectFit="cover"/></AspectRatio></Box></Tooltip>))}</SimpleGrid>) : (<Text color="brand.textLight">No saved designs. <ChakraLink as={RouterLink} to="/generate" color="brand.accentYellow">Create one!</ChakraLink></Text>))}</VStack></Box><Box bg="brand.paper" p={{ base: 5, md: 8 }} borderRadius="xl"><VStack spacing={6} align="stretch"><Heading as="h2" size="xl" color="brand.textLight" textAlign="center"><Icon as={FaPaintBrush} mr={3} />3. Customize & Preview</Heading>{!isCustomizeEnabled && (<Alert status="info" bg="blue.900"><AlertIcon />Select a product, color and size to enable customization</Alert>)}<SimpleGrid columns={{ base: 1, md: 2 }} spacing={8}><VStack spacing={4}><RadioGroup value={currentMockupType} onChange={setCurrentMockupType}><Stack direction="row" spacing={4} justifyContent="center"><Button size="sm" colorScheme={currentMockupType === 'tee' ? 'brandAccentYellow' : 'gray'} onClick={() => setCurrentMockupType('tee')}>Blank Tee</Button><Button size="sm" colorScheme={currentMockupType === 'man' ? 'brandAccentYellow' : 'gray'} onClick={() => setCurrentMockupType('man')} isDisabled={!finalVariant?.imageSet?.some(img => img.url.includes('man_'))}>On Model</Button></Stack></RadioGroup><Box w="100%" aspectRatio={1 / 1} bg="brand.primary" borderRadius="md" borderWidth="1px" borderColor="whiteAlpha.300" overflow="hidden"><canvas ref={canvasEl} style={{ width: '100%', height: '100%' }} /></Box><HStack spacing={4} justifyContent="center"><Button leftIcon={<Icon as={FaTrash} />} onClick={clearCanvas} colorScheme="red" variant="outline" size="sm">Clear All</Button><Button leftIcon={<Icon as={FaTrash} />} onClick={deleteSelectedObject} colorScheme="red" variant="outline" size="sm">Delete Selected</Button><Button leftIcon={<Icon as={FaArrowsAltH} />} onClick={centerSelectedObject} colorScheme="gray" variant="outline" size="sm">Center</Button></HStack></VStack><VStack spacing={4} bg="brand.secondary" p={6} borderRadius="md"><Heading size="md" color="brand.textLight">Add Text</Heading><FormControl><FormLabel color="brand.textLight">Text Content</FormLabel><ThemedControlInput value={textInputValue} onChange={(e) => setTextInputValue(e.target.value)} placeholder="Enter your text"/></FormControl><SimpleGrid columns={2} spacing={3}><FormControl><FormLabel color="brand.textLight">Color</FormLabel><InputGroup><ThemedControlInput type="color" value={textColor} onChange={(e) => setTextColor(e.target.value)} p={0} h="38px"/><InputRightElement pointerEvents="none"><Icon as={FaEyeDropper} color="brand.textMuted" /></InputRightElement></InputGroup></FormControl><FormControl><FormLabel color="brand.textLight">Size</FormLabel><NumberInput value={fontSize} onChange={(val) => setFontSize(val)} min={10} max={100}><NumberInputField as={ThemedControlInput} /><NumberInputStepper><NumberIncrementStepper /><NumberDecrementStepper /></NumberInputStepper></NumberInput></FormControl></SimpleGrid><FormControl><FormLabel color="brand.textLight">Font</FormLabel><ThemedSelect value={fontFamily} onChange={(e) => setFontFamily(e.target.value)}><option value="Bungee">Bungee</option><option value="Montserrat">Montserrat</option><option value="Arial">Arial</option></ThemedSelect></FormControl><Button leftIcon={<Icon as={FaFont} />} onClick={addTextToCanvas} colorScheme="brandAccentYellow" isDisabled={!textInputValue.trim()}>Add Text</Button></VStack></SimpleGrid><Divider my={6} borderColor="whiteAlpha.300" /><VStack spacing={4}><Text fontSize="xl" color="brand.textLight" textAlign="center">{finalVariant ? `Your ${finalVariant.size} ${finalVariant.colorName} ${selectedProduct?.name}` : "Select options above"}</Text><Text fontSize="3xl" fontWeight="bold" color="brand.accentYellow">{finalVariant ? `$${(selectedProduct.basePrice + (finalVariant.priceModifier || 0)).toFixed(2)}` : "$0.00"}</Text><Button leftIcon={<Icon as={FaShoppingCart} />} onClick={handleProceedToCheckout} colorScheme="brandAccentOrange" size="lg" isDisabled={!finalVariant || (!selectedDesign && !hasCanvasObjects)} w="full" maxW="md">Proceed to Checkout</Button></VStack></VStack></Box></VStack>);}
